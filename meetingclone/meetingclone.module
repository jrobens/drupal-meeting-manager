<?php

/**
 * @file
 * 
 * Clone meetings 
 * 
 * jrobens@interlated.com.au
 * 201203
 */
define('MEETINGCLONE_MODULE_NAME', 'meetingclone');
define('MEETINGCLONE_TABLE', 'meetingclone_history');
define("MEETINGCLONE_NODE_HIERARCHY_MODULE", 'nodehierarchy');

/**
 * Implementation of hook_help().
 */
function meetingclone_help($path, $arg) {
  switch ($path) {
    case 'admin/help#clone':
      $output = '<p>' . t('The clone module allows users to make a copy of an existing node and then edit that copy. The authorship is set to the current user, the menu and url aliases are reset, and the words "Clone of" are inserted into the title to remind you that you are not editing the original node.') . '</p>';
      $output .= '<p>' . t('Users with the "clone node" permission can utilize this functionality. A new tab will appear on node pages with the word "Clone".') . '</p>';
      return $output;
  }
}

/**
 * Implementation of hook_permission().
 */
function meetingclone_permission() {
  return array(
    'clone meetings' => array('title' => t('Clone meetings')),
  );
}

/**
 * Implementation of hook_menu().
 */
function meetingclone_menu() {
  $items = array();

  // array(1) is the group node. from %node - used to work out what group to add
  // the cloned data to.
  $items['meetingclone/clone/%node'] = array(
    'access callback' => 'meetingclone_access_cloning',
    'access arguments' => array(2, 1),
    'page callback' => 'meetingclone_node_check',
    'page arguments' => array(2),
    'title' => 'Clone meetings',
    'weight' => 5,
    'file' => 'meetingclone.pages.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  // Administration section
  //
  $items['admin/config/meetingclone'] = array(
    'title' => 'Meetings',
    'description' => 'Administer Meetings',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/meetingclone/settings'] = array(
    'title' => 'Clone Settings',
    'description' => 'Configure Meeting Clones',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('meetingclone_settings'),
    'access callback' => 'meetingclone_access_cloning_admin',
    'access arguments' => array(),
    'file' => 'meetingclone.pages.inc',
  );

  $items['admin/config/meetingclone/settings/overview'] = array(
    'title' => 'Settings',
    'description' => 'Configuration of sending methods',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // List the replications for deletion
  $items['admin/config/meetingclone/settings/replications'] = array(
    'title' => 'Replications',
    'access callback' => 'meetingclone_access_cloning_admin',
    'access arguments' => array(),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('meetingclone_list_replication_form'),
    'weight' => 6,
    'file' => 'includes/meetingclone_replications.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // Call back from the dialog to display the replicants for a replication
  $items['admin/config/meetingclone/settings/replicants/%'] = array(
    'title' => 'Replicants',
    'access callback' => 'meetingclone_access_cloning_admin',
    'access arguments' => array(),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('meetingclone_list_replication_form', 5),
    'weight' => 6,
    'file' => 'includes/meetingclone_list_replication.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Permissions for creating the clone form.
 * 
 * @param string $action 
 *    clone|remove_collection
 * @param node object
 *   Loaded via menu wild card or manually by node_load
 * @return boolean 
 */
function meetingclone_access_cloning($node, $action = 'invalid') {
  if (!isset($action)) {
    return FALSE;
  }
  // Don't want this module. Fine then. 
  if ($action != 'clone' && $action != 'remove_collection') {
    return FALSE;
  }

  // Node not found. It may be that we don't want this module. This always gets called.
  if (!$node) {
    drupal_set_message("Template node not found. This is a misconfiguration of the 'view'. Please see the site administrator.", 'error');
    return FALSE;
  }

  // Check basic permissions first.
  $access_permitted = meetingclone_is_permitted($node->type) && (user_access('clone meetings'));

  // Make sure the user can view the original node content, and create a new one..
  $access = $access_permitted && node_access('view', $node) && node_access('create', $node->type);

  // Let other modules alter this - for exmple to only allow some users
  // to clone specific nodes or types.
  drupal_alter("meetingclone_access", $access, $node);
  return $access;
}

/**
 * Access permissions for admin area. 
 * 
 * @return boolean
 *   TRUE if the user has the ability to clone. We are not separating admin clone from the ability to clone as both are technical. 
 */
function meetingclone_access_cloning_admin() {
  $test = user_access('clone meetings');
  return user_access('clone meetings');
}

/**
 * Filter out prevented meeting types. 
 * 
 * @param type $type
 * 
 * @return type 
 */
function meetingclone_is_permitted($type) {
  $omitted = variable_get('meetingclone_blacklist', array());
  return empty($omitted[$type]);
}

/**
 * Implementation of hook_mode_type().
 */
function meetingclone_node_type($op, $type_obj) {

  switch ($op) {
    case 'delete':
      variable_del('meetingclone_reset_' . $type_obj->type);
      break;
    case 'update':
      if (!empty($type_obj->old_type) && $type_obj->old_type != $type_obj->type) {
        if (variable_get('meetingclone_reset_' . $type_obj->old_type, FALSE)) {
          variable_del('meetingclone_reset_' . $type_obj->old_type);
          variable_set('meetingclone_reset_' . $type_obj->type, TRUE);
        }
      }
      break;
  }
}

/**
 * Implementation of hook_views_api.
 */
function meetingclone_views_api() {
  //TODO
  return;
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'meetingclone') . '/views',
  );
}

/**
 * Implementation of hook_admin_paths().
 */
function meetingclone_admin_paths() {
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'meetingclone/clone/*' => TRUE,
    );
    return $paths;
  }
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function meetingclone_block_configure($delta = '') {
  // The $delta parameter tells us which block is being configured.
  // In this example, we'll allow the administrator to customize
  // the text of the 'configurable text string' block defined in this module.

  $form = array();
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function meetingclone_block_save($delta = '', $edit = array()) {
  return;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function meetingclone_block_info() {
  $blocks = array();

  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.
  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.
  // Many options are defined in hook_block_info():
  $blocks['clone_meeting'] = array(
    // info: The name of the block.
    'info' => t('Clone meeting'),
    // Block caching options (per role, per user, etc.)
    'cache' => DRUPAL_CACHE_PER_ROLE, // default
    'status' => FALSE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function meetingclone_block_view($delta = '') {
  $block = array();
  $block['subject'] = t('Clone Meeting');
  $block['content'] = meetingclone_block_contents($delta);

  return $block;
}

/**
 * A module-defined block content function.
 * 
 * Attach the group node id onto the url so that we know which group to add the generated nodes to.
 */
function meetingclone_block_contents($which_block = '') {
  if (!variable_get('meetingclone_clone_template', FALSE)) {
    watchdog(MEETINGCLONE_MODULE_NAME, 'meetingclone_clone_template variable isn\'t set. Go to Configuration > Meetings > Clone Settings to set it.', array());
    
    return array();
  }
  $path = preg_split('#/#', $_GET['q']);
  $node_id = array_pop($path);

  // group_audience and parent (group id)
  $og_context = og_context();

  return array('#markup' => l('Batch generate meetings', 'meetingclone/clone/' . variable_get('meetingclone_clone_template', ''), array('query' => array("group_audience" => $og_context->gid, "parent" => variable_get('meetingclone_clone_template', '')))));
}

/**
 * Add a starting date field
 * 
 * @param type $form
 * @param type $form_state 
 */
function meetingclone_form_alter(&$form, &$form_state, $form_id) {
  if (!preg_match('#/meetingclone/clone#', $form['#action'])) {
    return;
  }

  // freakin search form also has the same action. Also check for a node.
  if (!isset($form['#node'])) {
    return;
  }
  
  $date_format = 'd-M-Y H:i';

  $form['meetingclone'] = array(
    '#type' => 'fieldset',
    '#attributes' => array('id' => 'meetingclone_settings'),
    '#title' => t('Meeting Clone Settings'),
    '#weight' => "-1000",
  );
  
  
  $form['meetingclone']['meetingclone_start_date'] = array(
    '#type' => 'date_popup', // types 'date_text' and 'date_timezone' are also supported. See .inc file.
    '#title' => 'Start Date',
    '#date_format' => $date_format,
    '#date_label_position' => 'within', // See other available attributes and what they do in date_api_elements.inc
    //'#date_timezone' => 'America/Chicago', // Optional, if your date has a timezone other than the site timezone.
    '#date_increment' => 15, // Optional, used by the date_select and date_popup elements to increment minutes and seconds.
    '#date_year_range' => '0:+5', // Optional, used to set the year range (back 3 years and forward 3 years is the default).
    '#default_value' => date('Y-m-d H:i:s'), // Must be this format due to silly drupal
    // See bug http://drupal.org/node/1362170 for disabled data. Doesn't happen.
    '#attributes' => array('tabindex' => 1),
    '#description' => t('Date of the first meeting.'),
    '#required' => TRUE,
  );

  $form['meetingclone']['meetingclone_interval'] = array(
    '#type' => 'select',
    '#title' => t('Interval'),
    '#description' => t('How often do you want to run this meeting?'),
    '#options' => array('monthly' => 'monthly', 'bi-monthly' => 'bi-monthly'),
    '#required' => FALSE,
    '#default_value' => 'bi-monthly',
    '#attributes' => array('tabindex' => 2),
  );

  $form['meetingclone']['meetingclone_weekdaywanted'] = array(
    '#type' => 'select',
    '#title' => t('Meeting day of week'),
    '#description' => t('The day of the week for the meeting.'),
    '#options' => array(1 => 'Monday', 2 => 'Tuesday', 3 => 'Wednesday', 4 => 'Thursday', 5 => 'Friday'),
    '#required' => FALSE,
    '#default_value' => 5,
    '#attributes' => array(),
  );

  $form['meetingclone']['meetingclone_instanceofmonth'] = array(
    '#type' => 'select',
    '#title' => t('Instance within month'),
    '#description' => t('Which week within the month.'),
    '#options' => array(1 => 'First', 2 => 'Second', 3 => 'Third', 4 => 'Fourth', -1 => 'Last'),
    '#required' => FALSE,
    '#default_value' => 2,
    '#attributes' => array(),
  );


  $form['meetingclone']['meetingclone_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of Repeats'),
    '#description' => t('Specify number of meetings.'),
    '#size' => 3,
    '#default_value' => '6',
    '#attributes' => array(),
  );

  // Record the serial number to identify this replicant.
  // The values for this will be set during cloning.
  $form['meetingclone']['meetingclone_serial'] = array(
    '#type' => 'value',
    '#value' => empty($form_state['node']->meetingclone_serial) ? '' : $form_state['node']->meetingclone_serial,
  );

  $form['meetingclone']['meetingclone_original'] = array(
    '#type' => 'value',
    '#value' => empty($form_state['node']->meetingclone_original) ? '' : $form_state['node']->meetingclone_original,
  );
  
  // Create an after_build command to clean up error messages
  $form['#after_build'][] = '_meetingclone_clean_messages_after_build';
}

/**
 * Clean out the message "could not identify group' as it doesn't matter at this point. 
 * 
 * "Failed to find the list of invitees from the group." comes from ognotify.
 * 
 * @param type $form
 * @param type $form_state
 * @return type
 */
function _meetingclone_clean_messages_after_build($form, &$form_state) {
  $messages = drupal_get_messages('warning', TRUE);
  if (!empty($messages['warning'])) {
    foreach ($messages['warning'] as $message_index => $message) {
      if ($message != 'Failed to find the list of invitees from the group.') {
        drupal_set_message($message, 'warning');
      }
    }
  }
  
  return $form;
}

/**
 * The node is not saved yet, so no nid.
 * 
 * @param type $node
 * @return type 
 */
function meetingclone_node_presave($node) {
  // only nodes relating to meeting clone do we want to mangle.
  if (!isset($node->meetingclone_serial)) {
    return;
  }

  // We don't want to recursively call this forever on save. If we have processed this node, then 
  // just let it save.
  if (isset($node->meetingclone_processed) && $node->meetingclone_processed) {
    return;
  }

  $create_meetings = new MeetingCloneCreateMeetings($node);
  $create_meetings->run();
}
